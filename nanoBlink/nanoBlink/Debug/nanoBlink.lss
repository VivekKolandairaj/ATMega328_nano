
nanoBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e7  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062f  00000000  00000000  0000088b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000223  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <stdint.h>


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	//uint8_t volatile *const pPortB = (uint8_t*) 0x25;
	//pointer to the port B pin register
	uint8_t volatile *const pPinB = (uint8_t*) 0x23;
	
	//a variable for counting overflow
	uint8_t volatile ovflo_count = 0;
  8a:	19 82       	std	Y+1, r1	; 0x01
	
    /* Replace with your application code */
	//setup PB4 as output
	*pDDRB |= (1 << 4);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	84 b9       	out	0x04, r24	; 4
	
	//setup timer 0 in normal mode operation
	*pTCCR0A = 0x00;
  92:	14 bc       	out	0x24, r1	; 36
	//setup prescaler for timer 0 as clk/1024
	*pTCCR0B = 0x05;
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	85 bd       	out	0x25, r24	; 37
	//load the timer/counter register
	*pTCNT0 = 0x00;
  98:	16 bc       	out	0x26, r1	; 38
	
    while (1) 
    {
		//toggle PB4
		*pPinB |= (1 << 4);
  9a:	83 b1       	in	r24, 0x03	; 3
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	83 b9       	out	0x03, r24	; 3
		
		while(ovflo_count < 61){
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <main+0x32>
			if((*pTIFR0 & 0x01) == 1){
  a2:	a8 9b       	sbis	0x15, 0	; 21
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <main+0x32>
				ovflo_count++; //increment the overflow counter
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	89 83       	std	Y+1, r24	; 0x01
				*pTIFR0 = 0x01; //clear the overflow flag
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	85 bb       	out	0x15, r24	; 21
				*pTCNT0 = 0x00; //reload the counter
  b0:	16 bc       	out	0x26, r1	; 38
    while (1) 
    {
		//toggle PB4
		*pPinB |= (1 << 4);
		
		while(ovflo_count < 61){
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	8d 33       	cpi	r24, 0x3D	; 61
  b6:	a8 f3       	brcs	.-22     	; 0xa2 <main+0x22>
				*pTCNT0 = 0x00; //reload the counter
			}
			else continue;
		}
		
		ovflo_count = 0;
  b8:	19 82       	std	Y+1, r1	; 0x01
		
		
		
    }
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x1a>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
